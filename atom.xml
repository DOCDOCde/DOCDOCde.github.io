<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DOCblog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://docdocde.github.io/"/>
  <updated>2016-08-27T14:22:34.811Z</updated>
  <id>https://docdocde.github.io/</id>
  
  <author>
    <name>DOC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>玩一玩flex布局</title>
    <link href="https://docdocde.github.io/2016/08/27/flex/"/>
    <id>https://docdocde.github.io/2016/08/27/flex/</id>
    <published>2016-08-27T13:54:58.000Z</published>
    <updated>2016-08-27T14:22:34.811Z</updated>
    
    <content type="html"><![CDATA[<h2 id="笔记和总结"><a href="#笔记和总结" class="headerlink" title="笔记和总结"></a>笔记和总结</h2><p>整理自:<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool</a>  </p>
<blockquote>
<h4 id="1-container——-display-flex-inline-flex-（需要加webkit前缀）"><a href="#1-container——-display-flex-inline-flex-（需要加webkit前缀）" class="headerlink" title="1. container——-display:flex | inline-flex | （需要加webkit前缀）"></a>1. container——-display:flex | inline-flex | （需要加webkit前缀）</h4><pre><code>1.1 flex-flow:包含两个值
     1.1.1  flex-direction:什么方向(row)
         row | row-reverse | column | column-reverse;
     1.1.2  flex-wrap:是否换行（nowrap）
         nowrap | wrap | wrap-reverse;
 1.2.1 justify-content:水平方向的分布（flex-start）
     flex-start | flex-end | center | space-between | space-around;
 1.2.2 align-content:竖直方向的分布（flex-start）
     flex-start | flex-end | center | space-between | space-around | stretch;
 1.3 align-items:以什么为基准对齐（flex-start）
     flex-start | flex-end | center | baseline | stretch;
</code></pre><h4 id="2-item"><a href="#2-item" class="headerlink" title="2.item"></a>2.item</h4><pre><code>2 .1 order:顺序（0）
 2 .2 flex:包含三个值（0 1 auto）有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。
     2 .2.1 flex-grow:主轴还有空间剩是否放大（0）
         0|1
     2 .2.2 flex-shrink:主轴还有空间不足是否放缩小（1）
         0|1
     2 .2.3 flex-basis:主轴长度（auto）
 2 .3 align-self:允许单个项目有与其他项目不一样的对齐方式（auto）
     auto | flex-start | flex-end | center | baseline | stretch;
</code></pre></blockquote>
<h2 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;title&gt;flex&lt;/title&gt;</div><div class="line">    &lt;style&gt;</div><div class="line">        #main&#123;</div><div class="line">            display: flex;</div><div class="line">            flex-direction: row;</div><div class="line">            /*flex-wrap: wrap;*/</div><div class="line">            align-items: baseline;</div><div class="line">            /*align-content:flex-start;*/</div><div class="line">            width: 500px;</div><div class="line">            height: 500px;</div><div class="line">            background-color: #ccc;</div><div class="line">            border: 1px solid red;</div><div class="line">            margin:auto;</div><div class="line">        &#125;</div><div class="line">        #main div&#123;</div><div class="line">            background-color: blue;</div><div class="line">            text-align: center;</div><div class="line">            width: 100px;</div><div class="line">            height: 100px;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;div id=&quot;main&quot;&gt;</div><div class="line">    &lt;div style=&quot;background-color:coral;order: 1;&quot;&gt;A&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightblue;order: 0;&quot;&gt;B&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:khaki;&quot;&gt;C&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:pink;&quot;&gt;D&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightgrey;&quot;&gt;E&lt;/div&gt;</div><div class="line">    &lt;div style=&quot;background-color:lightgreen;&quot;&gt;F&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="http://ockglmdea.bkt.clouddn.com/flex.PNG" alt="结果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;笔记和总结&quot;&gt;&lt;a href=&quot;#笔记和总结&quot; class=&quot;headerlink&quot; title=&quot;笔记和总结&quot;&gt;&lt;/a&gt;笔记和总结&lt;/h2&gt;&lt;p&gt;整理自:&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool&quot;&gt;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;1-container——-display-flex-inline-flex-（需要加webkit前缀）&quot;&gt;&lt;a href=&quot;#1-container——-display-flex-inline-flex-（需要加webkit前缀）&quot; class=&quot;headerlink&quot; title=&quot;1. container——-display:flex | inline-flex | （需要加webkit前缀）&quot;&gt;&lt;/a&gt;1. container——-display:flex | inline-flex | （需要加webkit前缀）&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1.1 flex-flow:包含两个值
     1.1.1  flex-direction:什么方向(row)
         row | row-reverse | column | column-reverse;
     1.1.2  flex-wrap:是否换行（nowrap）
         nowrap | wrap | wrap-reverse;
 1.2.1 justify-content:水平方向的分布（flex-start）
     flex-start | flex-end | center | space-between | space-around;
 1.2.2 align-content:竖直方向的分布（flex-start）
     flex-start | flex-end | center | space-between | space-around | stretch;
 1.3 align-items:以什么为基准对齐（flex-start）
     flex-start | flex-end | center | baseline | stretch;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;2-item&quot;&gt;&lt;a href=&quot;#2-item&quot; class=&quot;headerlink&quot; title=&quot;2.item&quot;&gt;&lt;/a&gt;2.item&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;2 .1 order:顺序（0）
 2 .2 flex:包含三个值（0 1 auto）有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。
     2 .2.1 flex-grow:主轴还有空间剩是否放大（0）
         0|1
     2 .2.2 flex-shrink:主轴还有空间不足是否放缩小（1）
         0|1
     2 .2.3 flex-basis:主轴长度（auto）
 2 .3 align-self:允许单个项目有与其他项目不一样的对齐方式（auto）
     auto | flex-start | flex-end | center | baseline | stretch;
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;h2 id=&quot;试验&quot;&gt;&lt;a href=&quot;#试验&quot; class=&quot;headerlink&quot; title=&quot;试验&quot;&gt;&lt;/a&gt;试验&lt;/h2&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="https://docdocde.github.io/tags/CSS/"/>
    
      <category term="Html" scheme="https://docdocde.github.io/tags/Html/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs初体验</title>
    <link href="https://docdocde.github.io/2016/08/27/fellAboutNodejs/"/>
    <id>https://docdocde.github.io/2016/08/27/fellAboutNodejs/</id>
    <published>2016-08-27T13:32:14.000Z</published>
    <updated>2016-08-27T13:46:27.978Z</updated>
    
    <content type="html"><![CDATA[<p><em>这几天大部分时间可能都是在理解那些概念。因为官网解释全都是英文而且自己英文理解能力也不怎么样，所以就只能从网络上别人的理解里了解。再通过一些小例子验证。现在来说说自己的理解吧！</em></p>
<h2 id="一、阻塞与非阻塞"><a href="#一、阻塞与非阻塞" class="headerlink" title="一、阻塞与非阻塞"></a>一、阻塞与非阻塞</h2><blockquote>
<p>先贴上一个连接吧：<a href="http://www.cnblogs.com/xiaozhi_5638/p/4268613.html#top" target="_blank" rel="external">http://www.cnblogs.com/xiaozhi_5638/p/4268613.html#top</a></p>
</blockquote>
<p>里面解释得觉得挺符合道理的。不过我感觉。不是因为非阻塞而实现功能，而是因为要实现功能才发生了回调和非阻塞。比如在接到读取文件的请求的时候，为了完成读取就必须要与硬盘I/O但是硬盘就像一个老大爷完全跟不上内存和CPU的速度。所以这里就会有一个时间上的不同。所以就产生了回调，调用一些功能性的函数就会出现这样的时间差。就出现了非阻塞和阻塞的差别。为了实现这个功能只有异步或者多线程，但是多线程在服务器这样的内存资源紧张的地方显然不是很划算。另一个不阻塞的原因是nodejs是以事件为驱动。在我的理解就是，有一些列事情在排队做，但是可以异步的去做，做完了再告诉主 事情结果。主事情再来将这个事情完结。就像小说情节的主线和副线，同时发展。副线发展到一定程度之后会回来影响主线发展。<br><img src="https://cl.ly/2A2R3t2Z3f1l/Image%202016-08-27%20at%209.41.36%20PM.png" alt="阻塞与非阻塞"><br><a id="more"></a></p>
<h2 id="二、nodejs的其它特点（只是自己的感觉，至于对错还得再日后学习力验证）"><a href="#二、nodejs的其它特点（只是自己的感觉，至于对错还得再日后学习力验证）" class="headerlink" title="二、nodejs的其它特点（只是自己的感觉，至于对错还得再日后学习力验证）"></a>二、nodejs的其它特点（只是自己的感觉，至于对错还得再日后学习力验证）</h2><p>感觉它服务器上特别灵活，就像一只小壁虎。因为首先接触到的就是http模块。在以前的认识里，对于网页的请求和响应应该是服务器和浏览器才能干的事情，但是nodejs居然可以模拟浏览器发送请求。也可以像服务器一样响应事件，甚至可以搭建一个服务器一样的东西创建网站。我们知道，对于能对底层操作的语言能干的事情就很神奇，因为后续的语言都是在它的基础上规定的（就像C语言可以直接用指针操作内存，PHP就是以c为基础。比如汇编就是直接对硬件操作）。但是nodejs又比其它的可以操作底层的语言灵活。这就决定了nodejs可以干很多神奇的事情。可能很多也是js有的特点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;这几天大部分时间可能都是在理解那些概念。因为官网解释全都是英文而且自己英文理解能力也不怎么样，所以就只能从网络上别人的理解里了解。再通过一些小例子验证。现在来说说自己的理解吧！&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;一、阻塞与非阻塞&quot;&gt;&lt;a href=&quot;#一、阻塞与非阻塞&quot; class=&quot;headerlink&quot; title=&quot;一、阻塞与非阻塞&quot;&gt;&lt;/a&gt;一、阻塞与非阻塞&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;先贴上一个连接吧：&lt;a href=&quot;http://www.cnblogs.com/xiaozhi_5638/p/4268613.html#top&quot;&gt;http://www.cnblogs.com/xiaozhi_5638/p/4268613.html#top&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;里面解释得觉得挺符合道理的。不过我感觉。不是因为非阻塞而实现功能，而是因为要实现功能才发生了回调和非阻塞。比如在接到读取文件的请求的时候，为了完成读取就必须要与硬盘I/O但是硬盘就像一个老大爷完全跟不上内存和CPU的速度。所以这里就会有一个时间上的不同。所以就产生了回调，调用一些功能性的函数就会出现这样的时间差。就出现了非阻塞和阻塞的差别。为了实现这个功能只有异步或者多线程，但是多线程在服务器这样的内存资源紧张的地方显然不是很划算。另一个不阻塞的原因是nodejs是以事件为驱动。在我的理解就是，有一些列事情在排队做，但是可以异步的去做，做完了再告诉主 事情结果。主事情再来将这个事情完结。就像小说情节的主线和副线，同时发展。副线发展到一定程度之后会回来影响主线发展。&lt;br&gt;&lt;img src=&quot;https://cl.ly/2A2R3t2Z3f1l/Image%202016-08-27%20at%209.41.36%20PM.png&quot; alt=&quot;阻塞与非阻塞&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="Js" scheme="https://docdocde.github.io/tags/Js/"/>
    
      <category term="NodeJs" scheme="https://docdocde.github.io/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>jQuery里奇怪的事</title>
    <link href="https://docdocde.github.io/2016/08/27/strange/"/>
    <id>https://docdocde.github.io/2016/08/27/strange/</id>
    <published>2016-08-27T12:04:28.000Z</published>
    <updated>2016-08-27T13:33:23.393Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、事件重复绑定"><a href="#一、事件重复绑定" class="headerlink" title="一、事件重复绑定"></a>一、事件重复绑定</h2><blockquote>
<p>在用jquery做分页的时候。在本页测试分页都没有问题，可是只要进入别的页面再回到博客页，点击下一页的按钮它就会跳转两页。再去一次别的页面回到博客页点击下一页，它就会跳转三页。后来才发现是事件重复绑定惹的祸</p>
</blockquote>
<p><strong>解决办法</strong>： <em>unbind()函数</em><br>规定从指定元素上删除的一个或多个事件处理程序。如果没有规定参数，unbind() 方法会删除指定元素的所有事件处理程序。unbind() 方法移除被选元素的事件处理程序。该方法能够移除所有的或被选的事件处理程序，或者当事件发生时终止指定函数的运行。ubind() 适用于任何通过 jQuery 附加的事件处理程序。<br>代码在\dist\public\js\blog.js</p>
<h2 id="二、DOM对象与jquery对象"><a href="#二、DOM对象与jquery对象" class="headerlink" title="二、DOM对象与jquery对象"></a>二、DOM对象与jquery对象</h2><blockquote>
<p>用$(selector)获取到东西之后使用for进行遍历得到$(selector)[i]，但是当我用$(selector)[i].css之类的语法时就会出错。原来$(selector)是DOM对象，所有无法使用jquery的语法。$(selector)才是jquery对象</p>
</blockquote>
<a id="more"></a>
<p><strong>解决办法</strong>：<em>将DOM对象转换为jquery对象</em><br>具体语法为$($(selector)[i])。这样就将DOM对象转换为jquery对象了，就可尽情的使用jquery的语法对$(selector)[i]操作了。<br>代码在\dist\public\js\blog.js</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、事件重复绑定&quot;&gt;&lt;a href=&quot;#一、事件重复绑定&quot; class=&quot;headerlink&quot; title=&quot;一、事件重复绑定&quot;&gt;&lt;/a&gt;一、事件重复绑定&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在用jquery做分页的时候。在本页测试分页都没有问题，可是只要进入别的页面再回到博客页，点击下一页的按钮它就会跳转两页。再去一次别的页面回到博客页点击下一页，它就会跳转三页。后来才发现是事件重复绑定惹的祸&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;解决办法&lt;/strong&gt;： &lt;em&gt;unbind()函数&lt;/em&gt;&lt;br&gt;规定从指定元素上删除的一个或多个事件处理程序。如果没有规定参数，unbind() 方法会删除指定元素的所有事件处理程序。unbind() 方法移除被选元素的事件处理程序。该方法能够移除所有的或被选的事件处理程序，或者当事件发生时终止指定函数的运行。ubind() 适用于任何通过 jQuery 附加的事件处理程序。&lt;br&gt;代码在\dist\public\js\blog.js&lt;/p&gt;
&lt;h2 id=&quot;二、DOM对象与jquery对象&quot;&gt;&lt;a href=&quot;#二、DOM对象与jquery对象&quot; class=&quot;headerlink&quot; title=&quot;二、DOM对象与jquery对象&quot;&gt;&lt;/a&gt;二、DOM对象与jquery对象&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;用$(selector)获取到东西之后使用for进行遍历得到$(selector)[i]，但是当我用$(selector)[i].css之类的语法时就会出错。原来$(selector)是DOM对象，所有无法使用jquery的语法。$(selector)才是jquery对象&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Js" scheme="https://docdocde.github.io/tags/Js/"/>
    
      <category term="jQuery" scheme="https://docdocde.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Ajax和position</title>
    <link href="https://docdocde.github.io/2016/08/27/position/"/>
    <id>https://docdocde.github.io/2016/08/27/position/</id>
    <published>2016-08-27T10:44:00.000Z</published>
    <updated>2016-08-27T14:44:23.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Ajax"><a href="#一、Ajax" class="headerlink" title="一、Ajax"></a>一、Ajax</h2><h3 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h3><p>利用javascript通过XMLHttpRequest对象实现数据的异步交互</p>
<p><img src="https://cl.ly/281y473P0f2f/Image%202016-08-27%20at%206.59.46%20PM.png" alt="解析"></p>
<blockquote>
<p>XHR英文全名XmlHttpRequest，中文可以解释为可扩展超文本传输请求。Xml可扩展标记语言，Http超文本传输协议，Request请求  </p>
</blockquote>
<h3 id="试验："><a href="#试验：" class="headerlink" title="试验："></a>试验：</h3><a id="more"></a>
<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">	&lt;title&gt;ajax&lt;/title&gt;</div><div class="line">	&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">		table,td,th&#123;</div><div class="line">			border: 1px solid blue;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> id=<span class="string">"keyword"</span>&gt;</div><div class="line">	&lt;button id=<span class="string">"seach"</span>&gt;查找&lt;/button&gt;</div><div class="line">	&lt;div id=<span class="string">"result"</span>&gt;&lt;/div&gt;</div><div class="line">	&lt;script&gt;</div><div class="line">		// window.onload=<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">				document.getElementById(<span class="string">"seach"</span>).onclick = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">					var request = new XMLHttpRequest();</div><div class="line">					</div><div class="line">					// console.log(keyword);</div><div class="line">					</div><div class="line">					// GET方法</div><div class="line">					// var keyword = <span class="string">"7.6.3.php?name="</span>+ document.getElementById(<span class="string">"keyword"</span>).value;</div><div class="line">					// request.open(<span class="string">"GET"</span>,keyword);</div><div class="line">					// request.send();</div><div class="line">					</div><div class="line">					//request方法</div><div class="line">					var data = <span class="string">"name="</span>+document.getElementById(<span class="string">"keyword"</span>).value;</div><div class="line">					request.open(<span class="string">"POST"</span>,<span class="string">"7.6.3.php"</span>);</div><div class="line">					request.setRequestHeader(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">					request.send(data);</div><div class="line"></div><div class="line">					request.onreadystatechange = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">						console.log(request.responseText);</div><div class="line">						<span class="keyword">if</span>( request.readyState===4 )&#123;</div><div class="line">							<span class="keyword">if</span>( request.status===200 )&#123;</div><div class="line">								document.getElementById(<span class="string">"result"</span>).innerHTML = request.responseText;</div><div class="line">								console.log(response.header);</div><div class="line">							&#125; <span class="keyword">else</span> &#123;</div><div class="line">								alert(<span class="string">"请求错误！"</span>+request.status);</div><div class="line">							&#125;</div><div class="line">						&#125;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">		// &#125;</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">	header(<span class="string">"Content-Type: text/plain;charset=utf-8"</span>); </div><div class="line">	<span class="variable">$dsn</span> = <span class="string">"mysql:host=localhost;dbname=bbb"</span>;</div><div class="line">	<span class="variable">$db</span> = new PDO(<span class="variable">$dsn</span>,<span class="string">'root'</span>,<span class="string">''</span>);</div><div class="line">	<span class="variable">$db</span>-&gt;query(<span class="string">'set names utf8'</span>);</div><div class="line">	<span class="variable">$name</span> = <span class="variable">$_POST</span>[<span class="string">'name'</span>];</div><div class="line">	var_dump (<span class="variable">$_POST</span>);</div><div class="line">	<span class="variable">$sql</span> = <span class="string">"select * from student where name='<span class="variable">$name</span>'"</span>;</div><div class="line">	<span class="variable">$result</span> = <span class="variable">$db</span>-&gt;query(<span class="variable">$sql</span>);</div><div class="line">	// var_dump(<span class="variable">$db</span>);</div><div class="line">	<span class="variable">$result</span>-&gt;<span class="built_in">set</span>FetchMode(PDO::FETCH_ASSOC);</div><div class="line">	<span class="variable">$row</span> = <span class="variable">$result</span>-&gt;fetch(1);</div><div class="line">	<span class="built_in">echo</span> &lt;&lt;&lt;STR</div><div class="line">	&lt;table&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;th&gt;姓名：&lt;/th&gt;</div><div class="line">			&lt;th&gt;学号：&lt;/th&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">		&lt;tr&gt;</div><div class="line">			&lt;td&gt;<span class="variable">$row</span>[1]&lt;/td&gt;</div><div class="line">			&lt;td&gt;<span class="variable">$row</span>[0]&lt;/td&gt;</div><div class="line">		&lt;/tr&gt;</div><div class="line">	&lt;/table&gt;</div><div class="line">STR;</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="https://cl.ly/1P1z2j2J223g/Image%202016-08-27%20at%207.11.29%20PM.png" alt="响应"></p>
<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>XMLHttpRequest请求有post和get。get的时候可以不用request.send(data)。优点是不需要刷新整个页面，减轻服务端压力。</p>
<h2 id="二、position属性"><a href="#二、position属性" class="headerlink" title="二、position属性"></a>二、position属性</h2><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p><img src="https://cl.ly/2N2G2F0A1V2S/Image%202016-08-27%20at%206.49.37%20PM.png" alt="解释"></p>
<h3 id="试验"><a href="#试验" class="headerlink" title="试验"></a>试验</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=<span class="string">"en"</span>&gt;</div><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">	&lt;title&gt;position&lt;/title&gt;</div><div class="line">	&lt;style&gt;</div><div class="line">		.body&#123;</div><div class="line">			width:80%;</div><div class="line">			margin:auto;</div><div class="line">			background-color: <span class="comment">#ccc;</span></div><div class="line">			border:1px solid <span class="comment">#000;</span></div><div class="line">			position: relative;</div><div class="line">		&#125;</div><div class="line">		.warp&#123;</div><div class="line">			width:500px;</div><div class="line">			background-color: blue;</div><div class="line">			border:1px solid <span class="comment">#000;</span></div><div class="line">			/*position: relative;*/</div><div class="line">			margin: auto;</div><div class="line">			/*left: 400px;</div><div class="line">			top: 200px;*/</div><div class="line">			/*overflow: hidden;*/</div><div class="line">		&#125;</div><div class="line">		.left&#123;</div><div class="line">			width:200px;</div><div class="line">			height: 200px;</div><div class="line">			border:1px solid <span class="comment">#000;</span></div><div class="line">			/*position: relative;</div><div class="line">			top: 100px;</div><div class="line">			left: 100px;*/</div><div class="line">			background-color: yellow;</div><div class="line">		&#125;</div><div class="line">		.right&#123;</div><div class="line">			width:200px;</div><div class="line">			height: 200px;</div><div class="line">			border:1px solid <span class="comment">#000;</span></div><div class="line">			position: relative;</div><div class="line">			/*top:0;</div><div class="line">			left: 0;*/</div><div class="line">			/*<span class="built_in">float</span>: right;*/</div><div class="line">			background-color: white;</div><div class="line">		&#125;</div><div class="line">		.content&#123;</div><div class="line">			width:150px;</div><div class="line">			height: 100px;</div><div class="line">			border:1px solid <span class="comment">#000;</span></div><div class="line">		&#125;</div><div class="line">		span&#123;</div><div class="line">			<span class="built_in">float</span>: right;</div><div class="line">			background-color: red;</div><div class="line">		&#125;</div><div class="line">		p&#123;</div><div class="line">			/*margin-top: 50px;*/</div><div class="line">			border:1px solid blue;</div><div class="line">			margin:0;</div><div class="line">			clear: right;</div><div class="line">		&#125;</div><div class="line">	&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">	&lt;div class=<span class="string">"body"</span>&gt;</div><div class="line">		&lt;span&gt;body&lt;/span&gt;</div><div class="line">		&lt;div class=<span class="string">"warp"</span>&gt;</div><div class="line">			&lt;span&gt;warp&lt;/span&gt;</div><div class="line">			&lt;div class=<span class="string">"left"</span>&gt;</div><div class="line">				&lt;span&gt;left&lt;/span&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">			&lt;div class=<span class="string">"right"</span>&gt;</div><div class="line">				&lt;span&gt;right&lt;/span&gt;</div><div class="line">				&lt;div class=<span class="string">"content"</span>&gt;</div><div class="line">					&lt;span&gt;content&lt;/span&gt;</div><div class="line">					&lt;p&gt;jsjdilifhnsaudfdskjsjdilifhnsaudfdskjsjdilifhnsaudfdskjsjdilifhnsaudfdsk&lt;/p&gt;</div><div class="line">				&lt;/div&gt;</div><div class="line">			&lt;/div&gt;</div><div class="line">		&lt;/div&gt;</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div style=<span class="string">"width:20%;margin:auto;border:1px solid #ccc;word-wrap: break-word;"</span>&gt;圣诞节快乐飞机立刻就发货呢圣诞快乐防腐剂；撒旦立刻就放暑假了放假的数量打发时间哦分了法律上的卡了lfhn;sfrishdsfjiofhdo;fgdokjsjdilifh打开发生了jsjdilifhnsaudfdssdjnsaudfdssdjlfhn;sfrishdsfjiofhdo;fgdokjsjdilifhnsaudfdssdjlfhn;sfrishdsfjiofhdo;fgdokjsjdil点击佛如所谓的ifhnsaudfdssdjlfhn;sfrishdsfjiofhdo;fgdokjsjdilifhnsaudfdssdjlfhn;sfrishdsfjiofhdo;fgdokjsjdilifhnsaudfdssdjlfhn;sfrishdsfjiofhdo;fgdok</div><div class="line">	&lt;/div&gt;</div><div class="line">	&lt;div class=<span class="string">"test"</span>&gt;</div><div class="line">        &lt;span&gt;王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他们相遇了，然后发现都对对方一见钟情后，所以就愉快的生活在了一起。。。。。王尼玛和陈尼玛都是年轻有为的骚年，有一天他&lt;span&gt;</div><div class="line">	    &lt;/div&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="http://ockglmdea.bkt.clouddn.com/position.PNG" alt="效果"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、Ajax&quot;&gt;&lt;a href=&quot;#一、Ajax&quot; class=&quot;headerlink&quot; title=&quot;一、Ajax&quot;&gt;&lt;/a&gt;一、Ajax&lt;/h2&gt;&lt;h3 id=&quot;解释：&quot;&gt;&lt;a href=&quot;#解释：&quot; class=&quot;headerlink&quot; title=&quot;解释：&quot;&gt;&lt;/a&gt;解释：&lt;/h3&gt;&lt;p&gt;利用javascript通过XMLHttpRequest对象实现数据的异步交互&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cl.ly/281y473P0f2f/Image%202016-08-27%20at%206.59.46%20PM.png&quot; alt=&quot;解析&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XHR英文全名XmlHttpRequest，中文可以解释为可扩展超文本传输请求。Xml可扩展标记语言，Http超文本传输协议，Request请求  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;试验：&quot;&gt;&lt;a href=&quot;#试验：&quot; class=&quot;headerlink&quot; title=&quot;试验：&quot;&gt;&lt;/a&gt;试验：&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Ajax" scheme="https://docdocde.github.io/tags/Ajax/"/>
    
      <category term="CSS" scheme="https://docdocde.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>这些天学习的一些浅见</title>
    <link href="https://docdocde.github.io/2016/08/27/think/"/>
    <id>https://docdocde.github.io/2016/08/27/think/</id>
    <published>2016-08-27T10:26:20.000Z</published>
    <updated>2016-08-27T12:07:23.318Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="一、关于模板："><a href="#一、关于模板：" class="headerlink" title="一、关于模板："></a>一、关于模板：</h2></blockquote>
<ol>
<li>模板的目的是为了让数据和页面分离。分离之后就有利于相互协作写代码</li>
<li>为了能在html里面写变量常量才需要使用模板引擎</li>
<li>模板引擎名字虽然高大上，但说白了就是在html里面利用正则表达式将模板中定义的关键字找出来。之后再相应的替换成html，因为浏览器最终只能呈现html代码的内容</li>
</ol>
<blockquote><h2 id="二、关于各种语言："><a href="#二、关于各种语言：" class="headerlink" title="二、关于各种语言："></a>二、关于各种语言：</h2></blockquote>
<ol>
<li>并不是规定哪种语言只能干嘛。比如很多Java可以写的也可以用c和c++写。但是因为更适合所以很多人去用某个语言来做相应的东西，所以就给别人印象某个语言是干嘛的</li>
<li>JavaScript就是寻找到html树（我暂时把它叫树，还不知到本来叫什么）里的节点，之后再改变它</li>
<li>浏览器拿到html代码之后就会用dom节点来描绘这个网页的html树，之后再根据css来给这棵树装饰。每个节点都是以一个对象的形式存在，里面有关于它的所有需要的信息，比如上一个节点是什么，下一个节点是什么</li>
</ol>
<a id="more"></a>
<blockquote><h2 id="三、关于bootstrap和jQuery："><a href="#三、关于bootstrap和jQuery：" class="headerlink" title="三、关于bootstrap和jQuery："></a>三、关于bootstrap和jQuery：</h2></blockquote>
<ol>
<li>bootstrap只是别人写好的一个css样式，我们要用的时候只要把它的类选择符写写成我们自己编写的html代码的类的值就行。</li>
<li>jQuery理解成别人写好的一些js的函数和定义好的对象，我们是在代码里调用它们。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;h2 id=&quot;一、关于模板：&quot;&gt;&lt;a href=&quot;#一、关于模板：&quot; class=&quot;headerlink&quot; title=&quot;一、关于模板：&quot;&gt;&lt;/a&gt;一、关于模板：&lt;/h2&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;模板的目的是为了让数据和页面分离。分离之后就有利于相互协作写代码&lt;/li&gt;
&lt;li&gt;为了能在html里面写变量常量才需要使用模板引擎&lt;/li&gt;
&lt;li&gt;模板引擎名字虽然高大上，但说白了就是在html里面利用正则表达式将模板中定义的关键字找出来。之后再相应的替换成html，因为浏览器最终只能呈现html代码的内容&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;&lt;h2 id=&quot;二、关于各种语言：&quot;&gt;&lt;a href=&quot;#二、关于各种语言：&quot; class=&quot;headerlink&quot; title=&quot;二、关于各种语言：&quot;&gt;&lt;/a&gt;二、关于各种语言：&lt;/h2&gt;&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;并不是规定哪种语言只能干嘛。比如很多Java可以写的也可以用c和c++写。但是因为更适合所以很多人去用某个语言来做相应的东西，所以就给别人印象某个语言是干嘛的&lt;/li&gt;
&lt;li&gt;JavaScript就是寻找到html树（我暂时把它叫树，还不知到本来叫什么）里的节点，之后再改变它&lt;/li&gt;
&lt;li&gt;浏览器拿到html代码之后就会用dom节点来描绘这个网页的html树，之后再根据css来给这棵树装饰。每个节点都是以一个对象的形式存在，里面有关于它的所有需要的信息，比如上一个节点是什么，下一个节点是什么&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="随想" scheme="https://docdocde.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="Bootstrap" scheme="https://docdocde.github.io/tags/Bootstrap/"/>
    
      <category term="Js" scheme="https://docdocde.github.io/tags/Js/"/>
    
      <category term="jQuery" scheme="https://docdocde.github.io/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>nodejs实现小爬虫</title>
    <link href="https://docdocde.github.io/2016/08/27/crawder/"/>
    <id>https://docdocde.github.io/2016/08/27/crawder/</id>
    <published>2016-08-27T07:32:40.000Z</published>
    <updated>2016-08-27T15:11:49.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、简单的页面爬取"><a href="#一、简单的页面爬取" class="headerlink" title="一、简单的页面爬取"></a>一、简单的页面爬取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var http = require(<span class="string">'http'</span>);</div><div class="line">var fs = require(<span class="string">'fs'</span>);</div><div class="line">var url = <span class="string">'http://www.jxnu.edu.cn/'</span>;</div><div class="line"></div><div class="line">http</div><div class="line">	.get(url, <span class="keyword">function</span>(res)&#123;</div><div class="line">		var html=<span class="string">''</span>;</div><div class="line"></div><div class="line">		// res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">		res.on(<span class="string">'data'</span>, <span class="keyword">function</span>(data)&#123;</div><div class="line">			html += data;</div><div class="line">			// console.log(Buffer.isBuffer(data));</div><div class="line">		&#125;)</div><div class="line">		res.on(<span class="string">'end'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">			// html.toString(<span class="string">'utf8'</span>);</div><div class="line">			console.log(res.header());</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div><div class="line">	.on(<span class="string">'error'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">			console.log(<span class="string">'获取失败！'</span>);</div><div class="line">		&#125;)</div></pre></td></tr></table></figure>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果  "></a>结果  <a id="more"></a></h3><p><img src="https://cl.ly/2v3C211D0H1T/Image%202016-08-27%20at%203.58.00%20PM.png" alt="结果"></p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>使用http的get方法，回调里对res（响应）进行监听。监听到数据的时候存到html=””字符串里</p>
<h2 id="二、简单的图片爬取"><a href="#二、简单的图片爬取" class="headerlink" title="二、简单的图片爬取"></a>二、简单的图片爬取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">var https = require(<span class="string">'https'</span>);</div><div class="line">var fs = require(<span class="string">'fs'</span>);</div><div class="line">var cheerio = require(<span class="string">'cheerio'</span>);</div><div class="line">var request = require(<span class="string">'../stream/node_modules/request'</span>);</div><div class="line">var baseUrl = <span class="string">'https://pixabay.com/'</span>;</div><div class="line">var path = <span class="string">'./images'</span>;</div><div class="line">var pictureNum = 10;</div><div class="line"></div><div class="line"><span class="keyword">function</span> getImgUrl(html)&#123;</div><div class="line">	var $ = cheerio.load(html);</div><div class="line">	var images = $(<span class="string">'img'</span>);</div><div class="line">	imgUrl = [];</div><div class="line">	images.each(<span class="keyword">function</span>(item)&#123;</div><div class="line">		var src = $(this).attr(<span class="string">'src'</span>);</div><div class="line">		// console.log($(this).attr(<span class="string">'src'</span>));</div><div class="line">		<span class="keyword">if</span> ( item&lt;=pictureNum )&#123;</div><div class="line">			// console.log(item);</div><div class="line">			imgUrl.push(baseUrl.substr(0,19)+src);//</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	<span class="built_in">return</span> imgUrl;</div><div class="line">&#125;</div><div class="line"><span class="keyword">function</span> download(url, fileName)&#123;</div><div class="line">	request.head(url, <span class="keyword">function</span>(err, res2, body)&#123;</div><div class="line">		// console.log(res2);</div><div class="line">		request(url)</div><div class="line">			.on(<span class="string">'error'</span>,<span class="keyword">function</span>(e)&#123;</div><div class="line">				console.log(e);</div><div class="line">			&#125;)</div><div class="line">			.pipe(fs.createWriteStream(path + <span class="string">"/"</span> + fileName));</div><div class="line">		console.log(fileName+<span class="string">'下载完成！'</span>);</div><div class="line">		<span class="keyword">if</span>( err )&#123;</div><div class="line">			console.log(err);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> getPicture(url) &#123;</div><div class="line">	//对所有地址进行异步下载</div><div class="line">	var fileName = Math.floor(Math.random()*100)+url.substr(-4,4);</div><div class="line">	<span class="built_in">return</span> new Promise(<span class="keyword">function</span>(resolve, reject)&#123;</div><div class="line">			download(url,fileName);</div><div class="line">			resolve(<span class="string">'正在下载...\n[ '</span>+url+<span class="string">' ]'</span>);</div><div class="line">			reject(fileName+<span class="string">'下载失败！'</span>);</div><div class="line">	&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">https</div><div class="line">	.get(baseUrl, <span class="keyword">function</span>(res)&#123;</div><div class="line">		var html=<span class="string">''</span>;</div><div class="line"></div><div class="line">		// res.setEncoding(<span class="string">'utf8'</span>);</div><div class="line">		res.on(<span class="string">'data'</span>, <span class="keyword">function</span>(data)&#123;</div><div class="line">			html += data;</div><div class="line"></div><div class="line"></div><div class="line">		&#125;)</div><div class="line">		res.on(<span class="string">'end'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">			var imgUrlArray = getImgUrl(html);</div><div class="line">			// console.log(imgUrlArray);</div><div class="line">			var urlEachArray = [];</div><div class="line">			imgUrlArray.forEach(<span class="keyword">function</span>(url)&#123;</div><div class="line">				urlEachArray.push(getPicture(url));</div><div class="line">			&#125;)</div><div class="line">			Promise</div><div class="line">				.all(urlEachArray)</div><div class="line">				.then(<span class="keyword">function</span>(ms)&#123;</div><div class="line">					ms.forEach(<span class="keyword">function</span>(info)&#123;</div><div class="line">						console.log(info);</div><div class="line">					&#125;)</div><div class="line"></div><div class="line">				&#125;)</div><div class="line">		&#125;)</div><div class="line">	&#125;)</div><div class="line">	.on(<span class="string">'error'</span>,<span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">			console.log(<span class="string">'连接页面失败！'</span>);</div><div class="line">		&#125;)</div></pre></td></tr></table></figure>
<h3 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h3><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p><img src="https://cl.ly/3h132e0D3t0s/Image%202016-08-27%20at%204.23.47%20PM.png" alt="结果1">  </p>
<h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4><p><img src="https://cl.ly/3Q3s1V0l1B2w/Image%202016-08-27%20at%204.19.33%20PM.png" alt="结果2"></p>
<h3 id="总结：-1"><a href="#总结：-1" class="headerlink" title="总结："></a>总结：</h3><h4 id="大致思路："><a href="#大致思路：" class="headerlink" title="大致思路："></a>大致思路：</h4><p>涉及到文档流、数组遍历、对象遍历、Promise使用<br><img src="https://cl.ly/0o150e0h0b0e/Image%202016-08-27%20at%204.31.54%20PM.png" alt="总结"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、简单的页面爬取&quot;&gt;&lt;a href=&quot;#一、简单的页面爬取&quot; class=&quot;headerlink&quot; title=&quot;一、简单的页面爬取&quot;&gt;&lt;/a&gt;一、简单的页面爬取&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var http = require(&lt;span class=&quot;string&quot;&gt;&#39;http&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var fs = require(&lt;span class=&quot;string&quot;&gt;&#39;fs&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var url = &lt;span class=&quot;string&quot;&gt;&#39;http://www.jxnu.edu.cn/&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;http&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	.get(url, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(res)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		var html=&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		// res.setEncoding(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		res.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(data)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			html += data;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			// console.log(Buffer.isBuffer(data));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		res.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			// html.toString(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			console.log(res.header());&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	.on(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;			console.log(&lt;span class=&quot;string&quot;&gt;&#39;获取失败！&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;结果&quot;&gt;&lt;a href=&quot;#结果&quot; class=&quot;headerlink&quot; title=&quot;结果  &quot;&gt;&lt;/a&gt;结果
    
    </summary>
    
    
      <category term="Js" scheme="https://docdocde.github.io/tags/Js/"/>
    
      <category term="NodeJs" scheme="https://docdocde.github.io/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://docdocde.github.io/2016/08/26/hello-world/"/>
    <id>https://docdocde.github.io/2016/08/26/hello-world/</id>
    <published>2016-08-26T10:16:26.851Z</published>
    <updated>2016-08-27T14:48:11.766Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<hr>
<h1 id="Standard-Markdown"><a href="#Standard-Markdown" class="headerlink" title="Standard Markdown"></a><strong>Standard Markdown</strong></h1><h2 id="Strong-and-Emphasize"><a href="#Strong-and-Emphasize" class="headerlink" title="Strong and Emphasize"></a>Strong and Emphasize</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*emphasize*   **strong**</div><div class="line">_emphasize_   __strong__</div></pre></td></tr></table></figure>
<h2 id="Links-and-Email"><a href="#Links-and-Email" class="headerlink" title="Links and Email"></a>Links and Email</h2><p>Inline:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">An [example](http://url.com/ &quot;Title&quot;)</div></pre></td></tr></table></figure></p>
<p>Reference-style labels (titles are optional):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">An [example][id]. Then, anywhere</div><div class="line">else in the doc, define the link:</div><div class="line"></div><div class="line">  [id]: http://example.com/  &quot;Title&quot;</div></pre></td></tr></table></figure></p>
<p>Email:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">An email &lt;example@example.com&gt; link.</div></pre></td></tr></table></figure></p>
<h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><p>Inline (titles are optional):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">![alt text](/path/img.jpg &quot;Title&quot;)</div></pre></td></tr></table></figure></p>
<p>Reference-style:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">![alt text][id]</div><div class="line"></div><div class="line">[id]: /url/to/img.jpg &quot;Title&quot;</div></pre></td></tr></table></figure></p>
<h2 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Setext-style:</div><div class="line"></div><div class="line">Header 1</div><div class="line">========</div><div class="line"></div><div class="line">Header 2</div><div class="line">--------</div></pre></td></tr></table></figure>
<p>atx-style (closing #’s are optional):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Header 1 #</div><div class="line"></div><div class="line">## Header 2 ##</div><div class="line"></div><div class="line">###### Header 6</div></pre></td></tr></table></figure></p>
<h2 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h2><p>Ordered, without paragraphs:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.  Foo</div><div class="line">2.  Bar</div></pre></td></tr></table></figure></p>
<p>Unordered, with paragraphs:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">*   A list item.</div><div class="line"></div><div class="line">    With multiple paragraphs.</div><div class="line"></div><div class="line">*   Bar</div></pre></td></tr></table></figure></p>
<p>You can nest them:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">*   Abacus</div><div class="line">    * answer</div><div class="line">*   Bubbles</div><div class="line">    1.  bunk</div><div class="line">    2.  bupkis</div><div class="line">        * BELITTLER</div><div class="line">    3. burper</div><div class="line">*   Cunning</div></pre></td></tr></table></figure></p>
<h2 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&gt; Email-style angle brackets</div><div class="line">&gt; are used for blockquotes.</div><div class="line"></div><div class="line">&gt; &gt; And, they can be nested.</div><div class="line"></div><div class="line">&gt; #### Headers in blockquotes</div><div class="line">&gt; </div><div class="line">&gt; * You can quote a list.</div><div class="line">&gt; * Etc.</div></pre></td></tr></table></figure>
<h2 id="Inline-Code"><a href="#Inline-Code" class="headerlink" title="Inline Code"></a>Inline Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">`&lt;code&gt;` spans are delimited</div><div class="line">by backticks.</div><div class="line"></div><div class="line">You can include literal backticks</div><div class="line">like `` `this` ``.</div></pre></td></tr></table></figure>
<h2 id="Block-Code"><a href="#Block-Code" class="headerlink" title="Block Code"></a>Block Code</h2><p>Indent every line of a code block by at least 4 spaces or 1 tab.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">This is a normal paragraph.</div><div class="line"></div><div class="line">    This is a preformatted</div><div class="line">    code block.</div></pre></td></tr></table></figure></p>
<h2 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h2><p>Three or more dashes or asterisks:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line"></div><div class="line">* * *</div><div class="line"></div><div class="line">- - - -</div></pre></td></tr></table></figure></p>
<h2 id="Hard-Line-Breaks"><a href="#Hard-Line-Breaks" class="headerlink" title="Hard Line Breaks"></a>Hard Line Breaks</h2><p>End a line with two or more spaces:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Roses are red,   </div><div class="line">Violets are blue.</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
